
== Ruby Tasks

1. Create a migration to add Permalinks field to Post model in such a way that it will be derived from title field:
       
       The code is in db/migrate/20130624112510_add_permalink_to_posts.rb file. we also added a validation for permalinks in app/models/post.rb to make permalinks unique.
       
       class AddPermalinkToPosts < ActiveRecord::Migration
         def up
           transaction do
             add_column :posts, :permalinks, :string
       
             Post.all.each_with_index do |p, i|
               title = p.title.gsub(/[^0-9a-z]/i, '')
               while !p.update_attributes(permalinks: title)
                 title += i.to_s
               end
             end
           end
         end
       
         def down
           remove_column :posts, :permalinks
         end
       end

2. Create a method to check whether a credit card is valid or not and a method to return cc with calculated checksum appended with it:
          
       The code is in config/initializers/Enbake.rb.For Validating a card with a number, call:-

       Enbake.append_check_digit("1234-5678-8765-4321")
       
       For Appending checksum with given card number, call:-
       
       Enbake.append_check_digit("1234-5678-8765-4321")


3. Create API for payment that won't allow duplicate payments.

       The code is in app/controllers/payments_controller.rb

       class PaymentsController < ApplicationController
       
       # POST /payments
       # POST /payments.json
         def create
       
           @payment = Payment.find_or_initialize_by_line_item_id_and_service_id(params[:payment][:line_item_id], params[:payment][:service_id])
       
           respond_to do |format|
             if @payment.update_attributes(params[:payment])
               format.html { redirect_to @payment, notice: 'Payment was successfully made.' }
               format.json { render json: @payment, status: :created, location: @payment }
             else
               format.html { render action: "new" }
               format.json { render json: @payment.errors, status: :unprocessable_entity }
             end
           end
         end
       end


       The curl request for testing it will be like:-
       
       curl --header "Content-Type:application/json" --header "Accept:application/json" -X POST -d '{"payment":{"data": "other data1", "line_item_id": "1","service_id": "1"}}' http://localhost:3000/payments
